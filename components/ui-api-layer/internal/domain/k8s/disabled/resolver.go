// Code generated by mockery v1.0.0
package disabled

import (
	"context"
	"github.com/kyma-project/kyma/components/ui-api-layer/internal/gqlschema"
	"k8s.io/client-go/informers"
)

// Resolver is an autogenerated mock type for the Resolver type
type Resolver struct {
	err error
}

// DeploymentBoundServiceInstanceNamesField provides a mock function with given fields: ctx, deployment
func (_m *Resolver) DeploymentBoundServiceInstanceNamesField(ctx context.Context, deployment *gqlschema.Deployment) ([]string, error) {
	var r0 []string
	return r0, _m.err
}

// DeploymentsQuery provides a mock function with given fields: ctx, environment, excludeFunctions
func (_m *Resolver) DeploymentsQuery(ctx context.Context, environment string, excludeFunctions *bool) ([]gqlschema.Deployment, error) {
	var r0 []gqlschema.Deployment
	return r0, _m.err
}

// EnvironmentsQuery provides a mock function with given fields: ctx, remoteEnvironment
func (_m *Resolver) EnvironmentsQuery(ctx context.Context, remoteEnvironment *string) ([]gqlschema.Environment, error) {
	var r0 []gqlschema.Environment
	return r0, _m.err
}

// InformerFactory provides a mock function with given fields:
func (_m *Resolver) InformerFactory() informers.SharedInformerFactory {
	var r0 informers.SharedInformerFactory
	return r0
}

// LimitRangesQuery provides a mock function with given fields: ctx, env
func (_m *Resolver) LimitRangesQuery(ctx context.Context, env string) ([]gqlschema.LimitRange, error) {
	var r0 []gqlschema.LimitRange

	return r0, _m.err
}

// ResourceQuotasQuery provides a mock function with given fields: ctx, environment
func (_m *Resolver) ResourceQuotasQuery(ctx context.Context, environment string) ([]gqlschema.ResourceQuota, error) {
	var r0 []gqlschema.ResourceQuota

	return r0, _m.err
}

// ResourceQuotasStatus provides a mock function with given fields: ctx, environment
func (_m *Resolver) ResourceQuotasStatus(ctx context.Context, environment string) (gqlschema.ResourceQuotasStatus, error) {
	var r0 gqlschema.ResourceQuotasStatus
	return r0, _m.err
}

// SecretQuery provides a mock function with given fields: ctx, name, env
func (_m *Resolver) SecretQuery(ctx context.Context, name string, env string) (*gqlschema.Secret, error) {
	return nil, _m.err
}
